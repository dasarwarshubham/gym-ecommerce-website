{"version":3,"file":"static/js/loginPage.457ec1d1.chunk.js","mappings":"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","sources":["components/form/Form.js","components/form/FormField.js","components/form/FormButton.js","components/form/FormRadio.js","pages/account/Login.js","redux/account/accountSelectors.js"],"sourcesContent":["import React from \"react\";\nimport { Formik } from \"formik\";\nimport { Form } from \"react-bootstrap\";\n\nfunction FormikForm({\n  initialValues,\n  onSubmit,\n  validationSchema,\n  enableReinitialize,\n  children,\n  ...otherProps\n}) {\n  return (\n    <Formik\n      enableReinitialize={enableReinitialize}\n      initialValues={initialValues}\n      onSubmit={onSubmit}\n      validationSchema={validationSchema}\n    >\n      {() => <Form {...otherProps}>{children}</Form>}\n    </Formik>\n  );\n}\n\nexport default FormikForm;\n","import React from \"react\";\nimport FormGroup from \"react-bootstrap/FormGroup\";\nimport FormLabel from \"react-bootstrap/FormLabel\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport Feedback from \"react-bootstrap/Feedback\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\n\nimport { useFormikContext } from \"formik\";\nimport { FormSelect } from \"react-bootstrap\";\n\nconst FormField = ({\n  label,\n  araiLabel,\n  type = \"text\",\n  modal = false,\n  name,\n  fieldClass,\n  children,\n  placeholder = \"Type here\",\n  ...otherProps\n}) => {\n  const { handleChange, values, errors, touched, setFieldValue } =\n    useFormikContext();\n  if (modal) {\n    return (\n      <FormGroup\n        as={Row}\n        controlId={name}\n        className={fieldClass ? fieldClass : \"mb-3\"}\n      >\n        {label && (\n          <FormLabel column xs={12} md={4}>\n            {label}\n          </FormLabel>\n        )}\n        <Col xs={12} md={8}>\n          {type === \"select\" ? (\n            <FormSelect\n              aria-label={label}\n              name={name}\n              onChange={handleChange}\n              isInvalid={touched[name] && !!errors[name]}\n              placeholder={placeholder}\n              {...otherProps}\n            >\n              {children}\n            </FormSelect>\n          ) : (\n            <FormControl\n              aria-label={label}\n              type={type}\n              name={name}\n              value={values[name]}\n              onChange={handleChange}\n              isInvalid={touched[name] && !!errors[name]}\n              placeholder={placeholder}\n              {...otherProps}\n            >\n              {children}\n            </FormControl>\n          )}\n          <Feedback type=\"invalid\">{errors[name]}</Feedback>\n        </Col>\n      </FormGroup>\n    );\n  }\n  if (type === \"select\") {\n    return (\n      <FormGroup controlId={name} className={fieldClass ? fieldClass : \"mb-5\"}>\n        {label && (\n          <FormLabel>{label}</FormLabel>\n        )}\n        <FormSelect\n          aria-label={label}\n          name={name}\n          onChange={handleChange}\n          isInvalid={touched[name] && !!errors[name]}\n          placeholder={placeholder}\n          {...otherProps}\n        >\n          {children}\n        </FormSelect>\n        <Feedback type=\"invalid\">{errors[name]}</Feedback>\n      </FormGroup>\n    );\n  }\n  return (\n    <FormGroup controlId={name} className={fieldClass ? fieldClass : \"mb-5\"}>\n      {label && (\n        <FormLabel>{label}</FormLabel>\n      )}\n      <FormControl\n        aria-label={label}\n        type={type}\n        name={name}\n        value={type === \"file\" ? null : values[name]}\n        onChange={\n          type !== \"file\"\n            ? handleChange\n            : (event) => setFieldValue(name, event.target.files[0])\n        }\n        isInvalid={touched[name] && !!errors[name]}\n        placeholder={placeholder}\n        {...otherProps}\n      >\n        {children}\n      </FormControl>\n      <Feedback type=\"invalid\">{errors[name]}</Feedback>\n    </FormGroup>\n  );\n};\n\nexport default FormField;\n","import React from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport { useFormikContext } from \"formik\";\n\nconst FormButton = ({\n  variant = \"primary\",\n  type = \"submit\",\n  children,\n  ...otherProps\n}) => {\n  const { handleSubmit, isSubmitting } = useFormikContext();\n  return (\n    <Button\n      variant={variant}\n      onClick={!isSubmitting ? handleSubmit : null}\n      disabled={isSubmitting}\n      type={type}\n      style={{ minWidth: \"120px\" }}\n      {...otherProps}\n    >\n      {isSubmitting ? (\n        <Spinner as=\"span\" size=\"sm\" animation=\"border\" />\n      ) : (\n        children\n      )}\n    </Button>\n  );\n};\n\nexport default FormButton;\n","import React from \"react\";\nimport FormGroup from \"react-bootstrap/FormGroup\";\nimport FormLabel from \"react-bootstrap/FormLabel\";\nimport FormCheck from \"react-bootstrap/FormCheck\";\nimport Feedback from \"react-bootstrap/Feedback\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\n\nimport { useFormikContext } from \"formik\";\n\nconst FormRadio = ({\n  label,\n  araiLabel,\n  modal = false,\n  type = \"radio\",\n  name,\n  fieldClass,\n  children,\n  options,\n  ...otherProps\n}) => {\n  const { values, errors, touched, setFieldValue } = useFormikContext();\n  if (modal) {\n    return (\n      <FormGroup\n        as={Row}\n        controlId={name}\n        className={fieldClass ? fieldClass : \"mb-3\"}\n      >\n        <FormLabel column xs={12} md={4}>\n          {label}\n        </FormLabel>\n        <Col xs={12} md={8}>\n          <div key={`inline-radio`} className=\"h-100 d-flex align-items-center\">\n            {options.map((option) => (\n              <FormCheck\n                inline\n                label={option.label}\n                name={name}\n                type={type}\n                aria-label={option.label}\n                onChange={() => setFieldValue(name, option.value)}\n                id={`inline-radio-${option.value}`}\n                key={`inline-radio-${option.value}`}\n                isInvalid={touched[name] && !!errors[name]}\n                checked={option.value === values[name]}\n                {...otherProps}\n              />\n            ))}\n          </div>\n          <Feedback type=\"invalid\">{errors[name]}</Feedback>\n        </Col>\n      </FormGroup>\n    );\n  }\n  return (\n    <FormGroup controlId={name} className={fieldClass ? fieldClass : \"mb-5\"}>\n      <FormLabel>{label}</FormLabel>\n      <br />\n      {options.map((option) => (\n        <FormCheck\n          inline\n          label={option.label}\n          name={name}\n          type={type}\n          aria-label={option.label}\n          onChange={() => setFieldValue(name, option.value)}\n          id={`inline-radio-${option.value}`}\n          key={`inline-radio-${option.value}`}\n          isInvalid={touched[name] && !!errors[name]}\n          checked={option.value === values[name]}\n          {...otherProps}\n        />\n      ))}\n      <Feedback type=\"invalid\">{errors[name]}</Feedback>\n    </FormGroup>\n  );\n};\n\nexport default FormRadio;\n","import React from \"react\";\nimport { Link, useNavigate, useLocation } from \"react-router-dom\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\n\nimport * as Yup from \"yup\";\nimport {\n  FormikForm,\n  FormField,\n  FormButton\n} from \"../../components/form\";\n\nimport { SIGNUP, FORGOT_PASSWORD, PROFILE } from \"../../constants/routes\";\n\nimport {\n  fetchAccountAddress,\n  fetchAccountData,\n  fetchAccountOrder,\n  loginUser,\n} from \"../../redux/account/accountActions\";\nimport { selectAccountError } from \"../../redux/account/accountSelectors\";\n\nconst validationSchema = Yup.object().shape({\n  username: Yup.string().required().email().label(\"Username\"),\n  password: Yup.string().required().label(\"Password\"),\n});\n\nconst LoginPage = () => {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const error = useSelector(selectAccountError);\n\n  const dispatch = useDispatch();\n\n  const prevLocation = location?.state?.from;\n\n  const handleClick = (values, setSubmitting, resetForm) => {\n    dispatch(loginUser(values))\n      .then((loginAction) => {\n        setSubmitting(false);\n        resetForm();\n        if (loginAction.meta.requestStatus === \"fulfilled\") {\n          dispatch(fetchAccountData());\n          dispatch(fetchAccountAddress());\n          dispatch(fetchAccountOrder());\n          if (prevLocation) {\n            navigate(prevLocation);\n          }\n          else {\n            navigate(PROFILE);\n          }\n        }\n      }).catch((error) => {\n        console.log(error);\n      })\n  };\n\n  return (\n    <Container>\n      <Row\n        className=\"justify-content-center align-items-center mx-0\"\n        style={{ minHeight: \"70vh\" }}\n      >\n        <Col xs={12} md={9} lg={8} xl={4}>\n          <h1 className=\"text-center mb-4\">Login</h1>\n\n          <FormikForm\n            initialValues={{\n              username: \"\",\n              password: \"\",\n            }}\n            validationSchema={validationSchema}\n            onSubmit={(values, { setSubmitting, resetForm }) =>\n              handleClick(values, setSubmitting, resetForm)\n            }\n          >\n            {error && <p className=\"text-danger\">{error}</p>}\n            <FormField label=\"Username\" type=\"email\" name=\"username\" />\n            <FormField label=\"Password\" type=\"password\" name=\"password\" />\n            <Link\n              className=\"btn btn-link btn-sm p-0 mx-auto mb-5 mt-2\"\n              to={FORGOT_PASSWORD}\n            >\n              Forgot your password?\n            </Link>\n\n            <div className=\"d-grid col-9 col-sm-5 col-md-4 mx-auto mb-4\">\n              <FormButton>Login</FormButton>\n            </div>\n\n            <div className=\"d-flex\">\n              <p className=\"d-flex mx-auto\">\n                Don't have an account?\n                <Link className={`btn btn-link btn-sm p-0 ms-2`} to={SIGNUP}>\n                  SignUp\n                </Link>\n              </p>\n            </div>\n          </FormikForm>\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default LoginPage;\n","import { createSelector } from \"reselect\";\n\nconst selectAccountState = (state) => state.account;\n\nexport const selectIsAuthenticated = createSelector(\n  [selectAccountState],\n  (account) => account.token !== null\n);\n\nexport const selectAccountData = createSelector(\n  [selectAccountState],\n  (account) => account.user\n);\n\nexport const selectAccountLoading = createSelector(\n  [selectAccountState],\n  (account) => account.loading\n);\n\nexport const selectAccountError = createSelector(\n  [selectAccountState],\n  (account) => account.error\n);\n\nexport const selectOrders = createSelector([selectAccountState], (account) => {\n  const orders = account.orders;\n  return {\n    currentOrders: orders?.filter((order) => order.order_status === \"Pending\"),\n    pastOrders: orders?.filter(\n      (order) =>\n        order.order_status === \"Delivered\" || order.order_status === \"Failed\"\n    ),\n  };\n});\n\nexport const selectAccountAddress = createSelector(\n  [selectAccountState],\n  (account) => account.address\n);\n"],"names":["_ref","initialValues","onSubmit","validationSchema","enableReinitialize","children","otherProps","_objectWithoutProperties","_excluded","_jsx","Formik","Form","_objectSpread","label","_ref$type","araiLabel","type","_ref$modal","modal","name","fieldClass","_ref$placeholder","placeholder","_useFormikContext","useFormikContext","handleChange","values","errors","touched","setFieldValue","_jsxs","FormGroup","as","Row","controlId","className","FormLabel","column","xs","md","Col","FormSelect","onChange","isInvalid","FormControl","value","Feedback","event","target","files","_ref$variant","variant","handleSubmit","isSubmitting","Button","onClick","disabled","style","minWidth","Spinner","size","animation","options","map","option","FormCheck","inline","id","concat","checked","Yup","shape","username","required","email","password","_location$state","navigate","useNavigate","location","useLocation","error","useSelector","selectAccountError","dispatch","useDispatch","prevLocation","state","from","Container","minHeight","lg","xl","FormikForm","setSubmitting","resetForm","loginUser","then","loginAction","meta","requestStatus","fetchAccountData","fetchAccountAddress","fetchAccountOrder","PROFILE","catch","console","log","handleClick","FormField","Link","to","FORGOT_PASSWORD","FormButton","SIGNUP","selectAccountState","account","selectAccountData","createSelector","token","user","selectAccountLoading","loading","selectOrders","orders","currentOrders","filter","order","order_status","pastOrders","selectAccountAddress","address"],"sourceRoot":""}