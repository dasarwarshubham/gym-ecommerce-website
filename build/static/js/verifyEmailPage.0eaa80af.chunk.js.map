{"version":3,"file":"static/js/verifyEmailPage.0eaa80af.chunk.js","mappings":"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","sources":["pages/account/VerifyEmailPage.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\n\nimport Col from \"react-bootstrap/Col\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\n\nimport * as Yup from \"yup\";\n\nimport { FormButton, FormField, FormikForm } from \"../../components/form\";\nimport {\n    Error,\n    Success\n} from '../../components/response';\n\nimport { LOGIN } from '../../constants/routes';\n\nimport { newVerifyEmailToken, verifyEmail } from \"../../services/accountAPI\";\n\nconst VerifyEmailPage = () => {\n    const { user_id, token } = useParams();\n\n    const [error, setError] = useState(null);\n    const [status, setStatus] = useState(null);\n    const [verificationStatus, setVerificationStatus] = useState(null);\n\n\n    const handleClick = async (values, setSubmitting, resetForm) => {\n        const { user_id, token } = values;\n        setError(null);\n        try {\n            const response = await verifyEmail(user_id, token);\n            setVerificationStatus(\"success\");\n            if (response.status === 200)\n                setStatus(response.data);\n        } catch (error) {\n            console.log(error);\n            setError(error.message);\n            setVerificationStatus(\"error\");\n        } finally {\n            setSubmitting(false);\n            resetForm();\n        }\n    };\n\n    const handleNewTokenRequest = async () => {\n        setError(null);\n        try {\n            const response = await newVerifyEmailToken(user_id, token);\n            setVerificationStatus(\"success\");\n            if (response.status === 200)\n                setStatus(response.data);\n        } catch (error) {\n            console.log(error);\n            setError(error.message);\n            setVerificationStatus(\"error\");\n        }\n    };\n\n    return (\n        <Container>\n            <Row\n                className=\"justify-content-center align-items-center mx-0\"\n                style={{ minHeight: \"70vh\" }}\n            >\n                {verificationStatus === \"success\" && (\n                    <Col xs={12} md={7} lg={6}>\n                        <Success\n                            title=\"Verification Successful\"\n                            status={status}\n                        >\n                            <>Your email has been verified successfully.</>\n                            <br /> You can now <Link to={LOGIN}>login</Link>.\n                        </Success>\n                    </Col>\n                )}\n                {verificationStatus === \"error\" && (\n                    <Col xs={12} md={7} lg={6}>\n                        <Error\n                            title=\"Verification Failed\"\n                            error={error}\n                            action={() => handleNewTokenRequest()}\n                        />\n                    </Col>\n                )}\n                {verificationStatus === null && (\n                    <Col xs={12} md={9} lg={8} xl={7}>\n                        <h1 className=\"text-center mb-4\">Email Verification</h1>\n                        <FormikForm\n                            initialValues={{\n                                user_id: user_id,\n                                token: token,\n                            }}\n                            validationSchema={Yup.object().shape({\n                                user_id: Yup.string()\n                                    .label(\"User Id\")\n                                    .required('User Id is required'),\n                                token: Yup.string()\n                                    .label(\"Verification Token\")\n                                    .required('verification token is required')\n                            })\n                            }\n                            onSubmit={async (values, { setSubmitting, resetForm }) =>\n                                handleClick(values, setSubmitting, resetForm)\n                            }\n                        >\n                            {error && <p className=\"text-danger text-center\">{JSON.stringify(error)}</p>}\n                            <FormField type=\"hidden\" name=\"user_id\" />\n                            <FormField type=\"hidden\" name=\"token\" />\n\n                            <div className=\"d-grid col-9 col-mobile-8 col-sm-5 col-md-4 col-lg-3 mx-auto mb-4\">\n                                <FormButton>Verify</FormButton>\n                            </div>\n                        </FormikForm>\n                    </Col>\n                )}\n            </Row>\n        </Container>\n    );\n};\n\n\nexport default VerifyEmailPage;\n"],"names":["_useParams","useParams","user_id","token","_useState","useState","_useState2","_slicedToArray","error","setError","_useState3","_useState4","status","setStatus","_useState5","_useState6","verificationStatus","setVerificationStatus","handleClick","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","values","setSubmitting","resetForm","response","wrap","_context","prev","next","verifyEmail","sent","data","t0","console","log","message","finish","stop","_x","_x2","_x3","apply","arguments","handleNewTokenRequest","_ref2","_callee2","_context2","newVerifyEmailToken","_jsx","Container","children","_jsxs","Row","className","style","minHeight","Col","xs","md","lg","Success","title","_Fragment","Link","to","LOGIN","Error","action","xl","FormikForm","initialValues","validationSchema","Yup","shape","label","required","onSubmit","_ref4","_callee3","_ref3","_context3","abrupt","_x4","_x5","JSON","stringify","FormField","type","name","FormButton"],"sourceRoot":""}