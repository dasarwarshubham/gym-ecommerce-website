{"version":3,"file":"static/js/signupPage.3cb33974.chunk.js","mappings":"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","sources":["components/form/Form.js","components/form/FormField.js","components/form/FormButton.js","components/form/FormRadio.js","components/response/signup/Success.js","components/response/signup/Error.js","components/response/emailVerification/Success.js","components/response/emailVerification/Error.js","pages/account/Signup.js","redux/account/accountSelectors.js"],"sourcesContent":["import React from \"react\";\nimport { Formik } from \"formik\";\nimport { Form } from \"react-bootstrap\";\n\nfunction FormikForm({\n  initialValues,\n  onSubmit,\n  validationSchema,\n  enableReinitialize,\n  children,\n  ...otherProps\n}) {\n  return (\n    <Formik\n      enableReinitialize={enableReinitialize}\n      initialValues={initialValues}\n      onSubmit={onSubmit}\n      validationSchema={validationSchema}\n    >\n      {() => <Form {...otherProps}>{children}</Form>}\n    </Formik>\n  );\n}\n\nexport default FormikForm;\n","import React from \"react\";\nimport FormGroup from \"react-bootstrap/FormGroup\";\nimport FormLabel from \"react-bootstrap/FormLabel\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport Feedback from \"react-bootstrap/Feedback\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\n\nimport { useFormikContext } from \"formik\";\nimport { FormSelect } from \"react-bootstrap\";\n\nconst FormField = ({\n  label,\n  araiLabel,\n  type = \"text\",\n  modal = false,\n  name,\n  fieldClass,\n  children,\n  ...otherProps\n}) => {\n  const { handleChange, values, errors, touched, setFieldValue } =\n    useFormikContext();\n  if (modal) {\n    return (\n      <FormGroup\n        as={Row}\n        controlId={name}\n        className={fieldClass ? fieldClass : \"mb-3\"}\n      >\n        {label && (\n          <FormLabel column xs={12} md={4}>\n            {label}\n          </FormLabel>\n        )}\n        <Col xs={12} md={8}>\n          {type === \"select\" ? (\n            <FormSelect\n              aria-label={label}\n              name={name}\n              onChange={handleChange}\n              isInvalid={touched[name] && !!errors[name]}\n              placeholder=\"Type here\"\n              {...otherProps}\n            >\n              {children}\n            </FormSelect>\n          ) : (\n            <FormControl\n              aria-label={label}\n              type={type}\n              name={name}\n              value={values[name]}\n              onChange={handleChange}\n              isInvalid={touched[name] && !!errors[name]}\n              placeholder=\"Type here\"\n              {...otherProps}\n            >\n              {children}\n            </FormControl>\n          )}\n          <Feedback type=\"invalid\">{errors[name]}</Feedback>\n        </Col>\n      </FormGroup>\n    );\n  }\n  if (type === \"select\") {\n    return (\n      <FormGroup controlId={name} className={fieldClass ? fieldClass : \"mb-5\"}>\n        {label && (\n          <FormLabel>{label}</FormLabel>\n        )}\n        <FormSelect\n          aria-label={label}\n          name={name}\n          onChange={handleChange}\n          isInvalid={touched[name] && !!errors[name]}\n          placeholder=\"Type here\"\n          {...otherProps}\n        >\n          {children}\n        </FormSelect>\n        <Feedback type=\"invalid\">{errors[name]}</Feedback>\n      </FormGroup>\n    );\n  }\n  return (\n    <FormGroup controlId={name} className={fieldClass ? fieldClass : \"mb-5\"}>\n      {label && (\n        <FormLabel>{label}</FormLabel>\n      )}\n      <FormControl\n        aria-label={label}\n        type={type}\n        name={name}\n        value={type === \"file\" ? null : values[name]}\n        onChange={\n          type !== \"file\"\n            ? handleChange\n            : (event) => setFieldValue(name, event.target.files[0])\n        }\n        isInvalid={touched[name] && !!errors[name]}\n        placeholder=\"Type here\"\n        {...otherProps}\n      >\n        {children}\n      </FormControl>\n      <Feedback type=\"invalid\">{errors[name]}</Feedback>\n    </FormGroup>\n  );\n};\n\nexport default FormField;\n","import React from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport { useFormikContext } from \"formik\";\n\nconst FormButton = ({\n  variant = \"primary\",\n  type = \"submit\",\n  children,\n  ...otherProps\n}) => {\n  const { handleSubmit, isSubmitting } = useFormikContext();\n  return (\n    <Button\n      variant={variant}\n      onClick={!isSubmitting ? handleSubmit : null}\n      disabled={isSubmitting}\n      type={type}\n      style={{ minWidth: \"120px\" }}\n      {...otherProps}\n    >\n      {isSubmitting ? (\n        <Spinner as=\"span\" size=\"sm\" animation=\"border\" />\n      ) : (\n        children\n      )}\n    </Button>\n  );\n};\n\nexport default FormButton;\n","import React from \"react\";\nimport FormGroup from \"react-bootstrap/FormGroup\";\nimport FormLabel from \"react-bootstrap/FormLabel\";\nimport FormCheck from \"react-bootstrap/FormCheck\";\nimport Feedback from \"react-bootstrap/Feedback\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\n\nimport { useFormikContext } from \"formik\";\n\nconst FormRadio = ({\n  label,\n  araiLabel,\n  modal = false,\n  type = \"radio\",\n  name,\n  fieldClass,\n  children,\n  options,\n  ...otherProps\n}) => {\n  const { values, errors, touched, setFieldValue } = useFormikContext();\n  if (modal) {\n    return (\n      <FormGroup\n        as={Row}\n        controlId={name}\n        className={fieldClass ? fieldClass : \"mb-3\"}\n      >\n        <FormLabel column xs={12} md={4}>\n          {label}\n        </FormLabel>\n        <Col xs={12} md={8}>\n          <div key={`inline-radio`} className=\"h-100 d-flex align-items-center\">\n            {options.map((option) => (\n              <FormCheck\n                inline\n                label={option.label}\n                name={name}\n                type={type}\n                aria-label={option.label}\n                onChange={() => setFieldValue(name, option.value)}\n                id={`inline-radio-${option.value}`}\n                key={`inline-radio-${option.value}`}\n                isInvalid={touched[name] && !!errors[name]}\n                checked={option.value === values[name]}\n                {...otherProps}\n              />\n            ))}\n          </div>\n          <Feedback type=\"invalid\">{errors[name]}</Feedback>\n        </Col>\n      </FormGroup>\n    );\n  }\n  return (\n    <FormGroup controlId={name} className={fieldClass ? fieldClass : \"mb-5\"}>\n      <FormLabel>{label}</FormLabel>\n      <br />\n      {options.map((option) => (\n        <FormCheck\n          inline\n          label={option.label}\n          name={name}\n          type={type}\n          aria-label={option.label}\n          onChange={() => setFieldValue(name, option.value)}\n          id={`inline-radio-${option.value}`}\n          key={`inline-radio-${option.value}`}\n          isInvalid={touched[name] && !!errors[name]}\n          checked={option.value === values[name]}\n          {...otherProps}\n        />\n      ))}\n      <Feedback type=\"invalid\">{errors[name]}</Feedback>\n    </FormGroup>\n  );\n};\n\nexport default FormRadio;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Card as BsCard } from 'react-bootstrap';\n\nimport { FaRegCircleCheck } from 'react-icons/fa6'\n\nimport { LOGIN } from '../../../constants/routes';\n\nimport styled from 'styled-components/macro';\n\nconst Card = styled(BsCard)`\n    background-color: #f3ffef;\n    border: 1px solid #4caf50;\n    border-radius: 5px;\n    padding: 20px;\n    text-align: center;\n\n    .success-icon {\n        font-size: 48px;\n        color: #4caf50;\n        margin-bottom: 3rem;\n    }\n\n    .continue-button {\n        margin-top: 20px;\n    }\n`;\n\nconst Success = () => {\n    return (\n        <Card className=\"mt-4\">\n            <Card.Body>\n                <FaRegCircleCheck className='success-icon' />\n                <Card.Title className=\"text-success text-center\">\n                    Signup Successful!\n                </Card.Title>\n                <Card.Text className=\"text-center\">\n                    Please check your email for a verification link.\n                </Card.Text>\n                <Link to={LOGIN} className=\"btn btn-success continue-button\">\n                    Continue\n                </Link>\n            </Card.Body>\n        </Card>\n    );\n}\n\nexport default Success;","import React from 'react';\nimport BsCard from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\n\nimport { FaCircleExclamation } from 'react-icons/fa6'\n\nimport styled from 'styled-components/macro';\n\nconst Card = styled(BsCard)`\n    background-color: #ffe4e4;\n    border: 1px solid #f44336;\n    border-radius: 5px;\n    padding: 20px;\n    text-align: center;\n\n    .error-icon {\n        font-size: 48px;\n        color: #f44336;\n        margin-bottom: 3rem;\n    }\n\n    .retry-button {\n        margin-top: 20px;\n    }\n`;\n\nconst Error = ({ setSignupStatus, error }) => {\n    return (\n        <Card className=\"mt-4 error-card\">\n            <Card.Body>\n                <FaCircleExclamation className='error-icon' />\n                <Card.Title className=\"text-danger text-center\">\n                    Signup Failed\n                </Card.Title>\n                <Card.Text className=\"text-center\">\n                    {error || <>An error occurred during signup. Please try again.</>}\n                </Card.Text>\n                <Button\n                    variant=\"danger\"\n                    className=\"retry-button\"\n                    onClick={() => setSignupStatus(null)} // Reset signup status\n                >\n                    Retry\n                </Button>\n            </Card.Body>\n        </Card>\n    );\n}\n\nexport default Error;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Card as BsCard } from 'react-bootstrap';\n\nimport { FaRegCircleCheck } from 'react-icons/fa6'\n\nimport { LOGIN } from '../../../constants/routes';\n\nimport styled from 'styled-components/macro';\n\nconst Card = styled(BsCard)`\n    background-color: #f3ffef;\n    border: 1px solid #4caf50;\n    border-radius: 5px;\n    padding: 20px;\n    text-align: center;\n\n    .success-icon {\n        font-size: 48px;\n        color: #4caf50;\n        margin-bottom: 3rem;\n    }\n`;\n\nconst Success = ({ status }) => {\n    return (\n        <Card className=\"mt-4\">\n            <Card.Body>\n                <FaRegCircleCheck className='success-icon' />\n                <Card.Title className=\"text-success text-center\">\n                    Verification Successful\n                </Card.Title>\n                <Card.Text className=\"text-center\">\n                    {status ||\n                        <>Your email has been verified successfully.</>\n                    }\n                    <br /> You can now <Link to={LOGIN}>login</Link>.\n                </Card.Text>\n            </Card.Body>\n        </Card>\n    );\n}\n\nexport default Success;","import React from 'react';\nimport styled from 'styled-components/macro';\n\nimport BsCard from 'react-bootstrap/Card';\nimport { FaCircleExclamation } from 'react-icons/fa6'\n\nconst Card = styled(BsCard)`\n    background-color: #ffe4e4;\n    border: 1px solid #f44336;\n    border-radius: 5px;\n    padding: 20px;\n    text-align: center;\n\n    .error-icon {\n        font-size: 48px;\n        color: #f44336;\n        margin-bottom: 3rem;\n    }\n\n    .retry-button {\n        margin-top: 20px;\n    }\n`;\n\nconst Error = ({ resendToken, error }) => {\n    return (\n        <Card className=\"mt-4\">\n            <Card.Body>\n                <FaCircleExclamation className='error-icon' />\n                <Card.Title className=\"text-danger text-center\">\n                    Verification Failed\n                </Card.Title>\n                <Card.Text className=\"text-center\">\n                    {error || \"An error occurred during verification. Please try again later.\"}\n                </Card.Text>\n                <button\n                    className=\"btn btn-danger retry-button\"\n                    onClick={() => resendToken()}\n                >\n                    Resend\n                </button>\n            </Card.Body>\n        </Card>\n    );\n}\n\nexport default Error;","import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\n\nimport * as Yup from \"yup\";\n\nimport {\n  FormikForm,\n  FormField,\n  FormButton,\n  // FormRadio,\n} from \"../../components/form\";\n\nimport {\n  SignupSuccess,\n  SignupError\n} from '../../components/response'\n\nimport { signupUser } from \"../../redux/account/accountActions\";\nimport { selectAccountError } from \"../../redux/account/accountSelectors\";\nimport { LOGIN } from \"../../constants/routes\";\n\nconst initialValues = {\n  first_name: \"\",\n  last_name: \"\",\n  email: \"\",\n  // phone: \"\",\n  // gender: \"\",\n  password: \"\",\n  confirm_password: \"\",\n};\n\n// const phoneRegExp =\n//   /^((\\\\+[1-9]{1,4}[ \\\\-]*)|(\\\\([0-9]{2,3}\\\\)[ \\\\-]*)|([0-9]{2,4})[ \\\\-]*)*?[0-9]{3,4}?[ \\\\-]*[0-9]{3,4}?$/;\n\nconst validationSchema = Yup.object().shape({\n  first_name: Yup.string().required().label(\"First Name\"),\n  last_name: Yup.string().required().label(\"Last Name\"),\n  email: Yup.string().required().email().label(\"Email\"),\n  // phone: Yup.string()\n  //   .required()\n  //   .label(\"Phone Number\")\n  //   .matches(phoneRegExp, \"Phone number is not valid\"),\n  // gender: Yup.string().required().label(\"Gender\").oneOf([\"M\", \"F\", \"NA\"]),\n  password: Yup.string().min(6).required().label(\"Password\"),\n  confirm_password: Yup.string()\n    .oneOf([Yup.ref(\"password\"), null], \"Passwords don't match!\")\n    .required(\"Re-Enter Your Password\"),\n});\n\nconst SignupPage = () => {\n  const dispatch = useDispatch();\n  const error = useSelector(selectAccountError);\n\n  const [signupStatus, setSignupStatus] = useState(null);\n\n  const handleClick = (values, setSubmitting, resetForm) => {\n    dispatch(signupUser(values))\n      .then((signupAction) => {\n        setSubmitting(false);\n        if (signupAction.meta.requestStatus === \"fulfilled\") {\n          // Signup was successful, set the signup status to \"success\"\n          setSignupStatus(\"success\");\n          resetForm();\n        } else {\n          // Signup failed, set the signup status to \"error\"\n          setSignupStatus(\"error\");\n        }\n      });\n  };\n\n  return (\n    <Container className=\"my-5\">\n      <Row\n        className=\"justify-content-center align-items-center\"\n        style={{ minHeight: \"70vh\" }}\n      >\n        {signupStatus === \"success\" && (\n          <Col xs={12} md={7} lg={6}>\n            <SignupSuccess />\n          </Col>\n        )}\n        {signupStatus === \"error\" && (\n          <Col xs={12} md={7} lg={6}>\n            <SignupError setSignupStatus={setSignupStatus} error={error} />\n          </Col>\n        )}\n        {signupStatus === null && (\n          <Col xs={12} md={9} lg={8} xl={7}>\n            <h1 className=\"text-center mb-4\">Create an account</h1>\n            <FormikForm\n              initialValues={initialValues}\n              validationSchema={validationSchema}\n              onSubmit={(values, { setSubmitting, resetForm }) =>\n                handleClick(values, setSubmitting, resetForm)\n              }\n              encType=\"multipart/form-data\"\n            >\n              {/* {error && <p className=\"text-danger\">{error}</p>} */}\n              <FormField label=\"First Name\" name=\"first_name\" />\n              <FormField label=\"Last Name\" name=\"last_name\" />\n              <FormField label=\"Email\" type=\"email\" name=\"email\" />\n              {/* <FormField label=\"Phone Number\" name=\"phone\" inputMode=\"numeric\" />\n              <FormRadio\n                label=\"Gender\"\n                name=\"gender\"\n                options={[\n                  { label: \"Male\", value: \"M\" },\n                  { label: \"Female\", value: \"F\" },\n                  { label: \"Prefer Not to Say\", value: \"NA\" },\n                ]}\n              /> */}\n              <FormField label=\"Password\" type=\"password\" name=\"password\" />\n              <FormField\n                label=\"Re-enter password\"\n                type=\"password\"\n                name=\"confirm_password\"\n              />\n\n              <div className=\"d-grid col-9 col-mobile-8 col-sm-5 col-md-4 col-lg-3 mx-auto mb-4\">\n                <FormButton>Signup</FormButton>\n              </div>\n\n              <div className=\"d-flex\">\n                <p className=\"d-flex mx-auto\">\n                  Already have an account?\n                  <Link className={`btn btn-link btn-sm p-0 ms-2`} to={LOGIN}>\n                    Login\n                  </Link>\n                </p>\n              </div>\n            </FormikForm>\n          </Col>\n        )}\n      </Row>\n    </Container>\n  );\n};\n\nexport default SignupPage;\n","import { createSelector } from \"reselect\";\n\nconst selectAccountState = (state) => state.account;\n\nexport const selectIsAuthenticated = createSelector(\n  [selectAccountState],\n  (account) => account.token !== null\n);\n\nexport const selectAccountData = createSelector(\n  [selectAccountState],\n  (account) => account.user\n);\n\nexport const selectAccountLoading = createSelector(\n  [selectAccountState],\n  (account) => account.loading\n);\n\nexport const selectAccountError = createSelector(\n  [selectAccountState],\n  (account) => account.error\n);\n\nexport const selectOrders = createSelector([selectAccountState], (account) => {\n  const orders = account.orders;\n  return {\n    currentOrders: orders?.filter((order) => order.order_status === \"Pending\"),\n    pastOrders: orders?.filter(\n      (order) =>\n        order.order_status === \"Delivered\" || order.order_status === \"Failed\"\n    ),\n  };\n});\n\nexport const selectAccountAddress = createSelector(\n  [selectAccountState],\n  (account) => account.address\n);\n"],"names":["_ref","initialValues","onSubmit","validationSchema","enableReinitialize","children","otherProps","_objectWithoutProperties","_excluded","_jsx","Formik","Form","_objectSpread","label","_ref$type","araiLabel","type","_ref$modal","modal","name","fieldClass","_useFormikContext","useFormikContext","handleChange","values","errors","touched","setFieldValue","_jsxs","FormGroup","as","Row","controlId","className","FormLabel","column","xs","md","Col","FormSelect","onChange","isInvalid","placeholder","FormControl","value","Feedback","event","target","files","_ref$variant","variant","handleSubmit","isSubmitting","Button","onClick","disabled","style","minWidth","Spinner","size","animation","options","map","option","FormCheck","inline","id","concat","checked","Card","styled","BsCard","withConfig","displayName","componentId","Body","FaRegCircleCheck","Title","Text","Link","to","LOGIN","setSignupStatus","error","FaCircleExclamation","_Fragment","status","resendToken","first_name","last_name","email","password","confirm_password","Yup","shape","required","min","oneOf","dispatch","useDispatch","useSelector","selectAccountError","_useState","useState","_useState2","_slicedToArray","signupStatus","Container","minHeight","lg","SignupSuccess","SignupError","xl","FormikForm","setSubmitting","resetForm","signupUser","then","signupAction","meta","requestStatus","handleClick","encType","FormField","FormButton","selectAccountState","state","account","selectAccountData","createSelector","token","user","selectAccountLoading","loading","selectOrders","orders","currentOrders","filter","order","order_status","pastOrders","selectAccountAddress","address"],"sourceRoot":""}