{"version":3,"file":"static/js/verifyEmailPage.8b535e17.chunk.js","mappings":"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","sources":["pages/account/VerifyEmailPage.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\nimport { Helmet } from \"react-helmet\";\n\nimport Col from \"react-bootstrap/Col\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\n\nimport * as Yup from \"yup\";\n\nimport { FormButton, FormField, FormikForm } from \"../../components/form\";\nimport {\n    Error,\n    Success\n} from '../../components/response';\n\nimport { LOGIN } from '../../constants/routes';\n\nimport { newVerifyEmailToken, verifyEmail } from \"../../services/accountAPI\";\n\nconst VerifyEmailPage = () => {\n    const { user_id, token } = useParams();\n\n    const [error, setError] = useState(null);\n    const [status, setStatus] = useState(null);\n    const [verificationStatus, setVerificationStatus] = useState(null);\n\n\n    const handleClick = async (values, setSubmitting, resetForm) => {\n        const { user_id, token } = values;\n        setError(null);\n        try {\n            const response = await verifyEmail(user_id, token);\n            setVerificationStatus(\"success\");\n            if (response.status === 200)\n                setStatus(response.data);\n        } catch (error) {\n            console.log(error);\n            setError(error.message);\n            setVerificationStatus(\"error\");\n        } finally {\n            setSubmitting(false);\n            resetForm();\n        }\n    };\n\n    const handleNewTokenRequest = async () => {\n        setError(null);\n        try {\n            const response = await newVerifyEmailToken(user_id, token);\n            setVerificationStatus(\"success\");\n            if (response.status === 200)\n                setStatus(response.data);\n        } catch (error) {\n            console.log(error);\n            setError(error.message);\n            setVerificationStatus(\"error\");\n        }\n    };\n\n    return (\n        <>\n            <Helmet>\n                <link rel=\"canonical\" href={`https://fitflex.site/verify-email/${user_id}/${token}`} />\n\n                <meta name=\"description\" content=\"Verify your email with Fitflex. Confirm your email address using the provided token for added account security.\" />\n                <meta name=\"keywords\" content=\"Email Verification, Account Security, Email Confirmation, Token Verification\" />\n\n                <meta property=\"og:title\" content=\"Verify Email | Fitflex - Confirm Your Email Address\" />\n                <meta property=\"og:description\" content=\"Verify your email with Fitflex. Confirm your email address using the provided token for added account security.\" />\n                <meta property=\"og:url\" content={`https://fitflex.site/verify-email/${user_id}/${token}`} />\n\n                <meta name=\"twitter:title\" content=\"Verify Email | Fitflex - Confirm Your Email Address\" />\n                <meta name=\"twitter:description\" content=\"Verify your email with Fitflex. Confirm your email address using the provided token for added account security.\" />\n\n                <title>Verify Email | Fitflex - Confirm Your Email Address</title>\n            </Helmet>\n            <Container>\n                <Row\n                    className=\"justify-content-center align-items-center mx-0\"\n                    style={{ minHeight: \"70vh\" }}\n                >\n                    {verificationStatus === \"success\" && (\n                        <Col xs={12} md={7} lg={6}>\n                            <Success\n                                title=\"Verification Successful\"\n                                status={status}\n                            >\n                                <>Your email has been verified successfully.</>\n                                <br /> You can now <Link to={LOGIN}>login</Link>.\n                            </Success>\n                        </Col>\n                    )}\n                    {verificationStatus === \"error\" && (\n                        <Col xs={12} md={7} lg={6}>\n                            <Error\n                                title=\"Verification Failed\"\n                                error={error}\n                                action={() => handleNewTokenRequest()}\n                            />\n                        </Col>\n                    )}\n                    {verificationStatus === null && (\n                        <Col xs={12} md={9} lg={8} xl={7}>\n                            <h1 className=\"text-center mb-4\">Email Verification</h1>\n                            <FormikForm\n                                initialValues={{\n                                    user_id: user_id,\n                                    token: token,\n                                }}\n                                validationSchema={Yup.object().shape({\n                                    user_id: Yup.string()\n                                        .label(\"User Id\")\n                                        .required('User Id is required'),\n                                    token: Yup.string()\n                                        .label(\"Verification Token\")\n                                        .required('verification token is required')\n                                })\n                                }\n                                onSubmit={async (values, { setSubmitting, resetForm }) =>\n                                    handleClick(values, setSubmitting, resetForm)\n                                }\n                            >\n                                {error && <p className=\"text-danger text-center\">{JSON.stringify(error)}</p>}\n                                <FormField type=\"hidden\" name=\"user_id\" />\n                                <FormField type=\"hidden\" name=\"token\" />\n\n                                <div className=\"d-grid col-9 col-mobile-8 col-sm-5 col-md-4 col-lg-3 mx-auto mb-4\">\n                                    <FormButton>Verify</FormButton>\n                                </div>\n                            </FormikForm>\n                        </Col>\n                    )}\n                </Row>\n            </Container>\n        </>\n    );\n};\n\n\nexport default VerifyEmailPage;\n"],"names":["_useParams","useParams","user_id","token","_useState","useState","_useState2","_slicedToArray","error","setError","_useState3","_useState4","status","setStatus","_useState5","_useState6","verificationStatus","setVerificationStatus","handleClick","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","values","setSubmitting","resetForm","response","wrap","_context","prev","next","verifyEmail","sent","data","t0","console","log","message","finish","stop","_x","_x2","_x3","apply","arguments","handleNewTokenRequest","_ref2","_callee2","_context2","newVerifyEmailToken","_jsxs","_Fragment","children","Helmet","_jsx","rel","href","concat","name","content","property","Container","Row","className","style","minHeight","Col","xs","md","lg","Success","title","Link","to","LOGIN","Error","action","xl","FormikForm","initialValues","validationSchema","Yup","shape","label","required","onSubmit","_ref4","_callee3","_ref3","_context3","abrupt","_x4","_x5","JSON","stringify","FormField","type","FormButton"],"sourceRoot":""}