{"version":3,"file":"static/js/signupPage.c8623262.chunk.js","mappings":"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","sources":["pages/account/Signup.js","redux/account/accountSelectors.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport { Helmet } from \"react-helmet\";\n\nimport Col from \"react-bootstrap/Col\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\n\nimport * as Yup from \"yup\";\n\nimport {\n  FormButton,\n  FormField,\n  FormikForm,\n} from \"../../components/form\";\n\nimport {\n  Error,\n  Success\n} from '../../components/response';\n\nimport { LOGIN } from \"../../constants/routes\";\nimport { signupUser } from \"../../redux/account/accountActions\";\nimport { selectAccountError } from \"../../redux/account/accountSelectors\";\n\nconst initialValues = {\n  first_name: \"\",\n  last_name: \"\",\n  email: \"\",\n  // phone: \"\",\n  // gender: \"\",\n  password: \"\",\n  confirm_password: \"\",\n};\n\n// const phoneRegExp =\n//   /^((\\\\+[1-9]{1,4}[ \\\\-]*)|(\\\\([0-9]{2,3}\\\\)[ \\\\-]*)|([0-9]{2,4})[ \\\\-]*)*?[0-9]{3,4}?[ \\\\-]*[0-9]{3,4}?$/;\n\nconst validationSchema = Yup.object().shape({\n  first_name: Yup.string().required().label(\"First Name\"),\n  last_name: Yup.string().required().label(\"Last Name\"),\n  email: Yup.string().required().email().label(\"Email\"),\n  // phone: Yup.string()\n  //   .required()\n  //   .label(\"Phone Number\")\n  //   .matches(phoneRegExp, \"Phone number is not valid\"),\n  // gender: Yup.string().required().label(\"Gender\").oneOf([\"M\", \"F\", \"NA\"]),\n  password: Yup.string().min(6).required().label(\"Password\"),\n  confirm_password: Yup.string()\n    .oneOf([Yup.ref(\"password\"), null], \"Passwords don't match!\")\n    .required(\"Re-Enter Your Password\"),\n});\n\nconst SignupPage = () => {\n  const dispatch = useDispatch();\n  const error = useSelector(selectAccountError);\n\n  const [signupStatus, setSignupStatus] = useState(null);\n\n  const handleClick = (values, setSubmitting, resetForm) => {\n    dispatch(signupUser(values))\n      .then((signupAction) => {\n        setSubmitting(false);\n        if (signupAction.meta.requestStatus === \"fulfilled\") {\n          setSignupStatus(\"success\");\n          resetForm();\n        } else {\n          setSignupStatus(\"error\");\n        }\n      });\n  };\n\n  return (\n    <>\n      <Helmet>\n        <link rel=\"canonical\" href=\"https://fitflex.site/signup\" />\n\n        <meta name=\"description\" content=\"Sign up for a Fitflex account. Begin your fitness journey with access to top-quality gym equipment and fitness gear.\" />\n        <meta name=\"keywords\" content=\"Signup, Fitflex Account, Fitness Journey, User Registration\" />\n\n        <meta property=\"og:title\" content=\"Signup | Fitflex - Begin Your Fitness Journey\" />\n        <meta property=\"og:description\" content=\"Sign up for a Fitflex account. Begin your fitness journey with access to top-quality gym equipment and fitness gear.\" />\n        <meta property=\"og:url\" content=\"https://fitflex.site/signup\" />\n\n        <meta name=\"twitter:title\" content=\"Signup | Fitflex - Begin Your Fitness Journey\" />\n        <meta name=\"twitter:description\" content=\"Sign up for a Fitflex account. Begin your fitness journey with access to top-quality gym equipment and fitness gear.\" />\n\n        <title>Signup | Fitflex - Begin Your Fitness Journey</title>\n      </Helmet>\n      <Container className=\"my-5\">\n        <Row\n          className=\"justify-content-center align-items-center mx-0\"\n          style={{ minHeight: \"65vh\" }}\n        >\n          {signupStatus === \"success\" && (\n            <Col xs={12} md={7} lg={6}>\n              <Success\n                title=\"Signup Successful!\"\n              >\n                Please check your email for a verification link.\n              </Success>\n            </Col>\n          )}\n          {signupStatus === \"error\" && (\n            <Col xs={12} md={7} lg={6}>\n              <Error\n                title=\"Signup Failed\"\n                error={error}\n                action={() => setSignupStatus(null)}\n              />\n            </Col>\n          )}\n          {signupStatus === null && (\n            <Col xs={12} md={9} lg={8} xl={7}>\n              <h1 className=\"text-center mb-4\">Create an account</h1>\n              <FormikForm\n                initialValues={initialValues}\n                validationSchema={validationSchema}\n                onSubmit={(values, { setSubmitting, resetForm }) =>\n                  handleClick(values, setSubmitting, resetForm)\n                }\n                encType=\"multipart/form-data\"\n              >\n                {/* {error && <p className=\"text-danger\">{error}</p>} */}\n                <FormField label=\"First Name\" name=\"first_name\" />\n                <FormField label=\"Last Name\" name=\"last_name\" />\n                <FormField label=\"Email\" type=\"email\" name=\"email\" />\n                {/* <FormField label=\"Phone Number\" name=\"phone\" inputMode=\"numeric\" />\n              <FormRadio\n                label=\"Gender\"\n                name=\"gender\"\n                options={[\n                  { label: \"Male\", value: \"M\" },\n                  { label: \"Female\", value: \"F\" },\n                  { label: \"Prefer Not to Say\", value: \"NA\" },\n                ]}\n              /> */}\n                <FormField label=\"Password\" type=\"password\" name=\"password\" />\n                <FormField\n                  label=\"Re-enter password\"\n                  type=\"password\"\n                  name=\"confirm_password\"\n                />\n\n                <div className=\"d-grid col-9 col-mobile-8 col-sm-5 col-md-4 col-lg-3 mx-auto mb-4\">\n                  <FormButton>Signup</FormButton>\n                </div>\n\n                <div className=\"d-flex\">\n                  <p className=\"d-flex mx-auto\">\n                    Already have an account?\n                    <Link className={`btn btn-link btn-sm p-0 ms-2`} to={LOGIN}>\n                      Login\n                    </Link>\n                  </p>\n                </div>\n              </FormikForm>\n            </Col>\n          )}\n        </Row>\n      </Container>\n    </>\n  );\n};\n\nexport default SignupPage;\n","import { createSelector } from \"reselect\";\n\nconst selectAccountState = (state) => state.account;\n\nexport const selectIsAuthenticated = createSelector(\n  [selectAccountState],\n  (account) => account.token !== null\n);\n\nexport const selectAccountData = createSelector(\n  [selectAccountState],\n  (account) => account.user\n);\n\nexport const selectAccountLoading = createSelector(\n  [selectAccountState],\n  (account) => account.loading\n);\n\nexport const selectAccountError = createSelector(\n  [selectAccountState],\n  (account) => account.error\n);\n\nexport const selectOrders = createSelector([selectAccountState], (account) => {\n  const orders = account.orders;\n  return {\n    currentOrders: orders?.filter((order) => order.order_status === \"Pending\"),\n    pastOrders: orders?.filter(\n      (order) =>\n        order.order_status === \"Delivered\" || order.order_status === \"Failed\"\n    ),\n  };\n});\n\nexport const selectAccountAddress = createSelector(\n  [selectAccountState],\n  (account) => account.address\n);\n"],"names":["initialValues","first_name","last_name","email","password","confirm_password","validationSchema","Yup","shape","required","label","min","oneOf","dispatch","useDispatch","error","useSelector","selectAccountError","_useState","useState","_useState2","_slicedToArray","signupStatus","setSignupStatus","_jsxs","_Fragment","children","Helmet","_jsx","rel","href","name","content","property","Container","className","Row","style","minHeight","Col","xs","md","lg","Success","title","Error","action","xl","FormikForm","onSubmit","values","_ref","setSubmitting","resetForm","signupUser","then","signupAction","meta","requestStatus","handleClick","encType","FormField","type","FormButton","Link","to","LOGIN","selectAccountState","state","account","selectAccountData","createSelector","token","user","selectAccountLoading","loading","selectOrders","orders","currentOrders","filter","order","order_status","pastOrders","selectAccountAddress","address"],"sourceRoot":""}